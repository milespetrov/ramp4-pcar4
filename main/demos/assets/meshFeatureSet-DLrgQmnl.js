import{i as h,aU as l,b_ as d,I as S,bx as g}from"./main-gTlFhyzJ.js";import E from"./Mesh-D6pEBcrp.js";import{n as N,i as D}from"./External-BYMtu3kq.js";import{s as M}from"./infoFor3D-DhzudQro.js";import{g as F}from"./FeatureSet-CteSHIW0.js";import{n as I,i as T}from"./meshFeatureAttributes-DbFGUNWO.js";import"./preload-helper-DMGCcr4D.js";import"./axisAngleDegrees-Ct6zl8KO.js";import"./mat4-D37lU6g4.js";import"./common-DQOJ18NT.js";import"./quat-Kfmg_Ms6.js";import"./mat3f64-B5o_lm6j.js";import"./quatf64-aQ5IuZRd.js";import"./vec32-DNDoKE4O.js";import"./vec42-CKs01hkn.js";import"./MeshComponent-_5lJR5Th.js";import"./imageUtils-e7Kr9OTI.js";import"./meshProperties-B4vupnXI.js";import"./MeshLocalVertexSpace-CE56bycb.js";import"./MeshTransform-B0iCPhK2.js";import"./mat4f64-q_b6UJoq.js";import"./MeshVertexAttributes-CZSqRnF4.js";import"./meshVertexSpaceUtils-BWlq1wSV.js";import"./triangulationUtils-SgawRqUH.js";import"./earcut-D9gy186-.js";import"./Indices-CKCTJ0t7.js";import"./plane-jee6V0fz.js";import"./vectorStacks-BdKXlC4y.js";import"./vec2f64-Cgb6qxNH.js";import"./vec4f64-DPb6J-GU.js";import"./deduplicate-BU33V7yN.js";import"./projectPointToVector-_xfuA_TO.js";import"./projectionUtils-2jruhjkJ.js";import"./vertexSpaceConversion-Dd2lPtSF.js";import"./mat3-CruJiiUv.js";import"./spatialReferenceEllipsoidUtils-DyE6xbrj.js";import"./computeTranslationToOriginAndRotation-2ffZwjbc.js";import"./vec3-CGdUX4uA.js";import"./BufferView-D9Z9G1U_.js";import"./vec2-ChnYg_BJ.js";import"./vec4-CgbCqLX0.js";import"./Field-Ckj6W1Qh.js";import"./fieldType-DWCEVZIR.js";const b=()=>h.getLogger("esri.rest.support.meshFeatureSet");function Dt(t,o,r){const e=r.features;r.features=[],delete r.geometryType;const s=F.fromJSON(r);if(s.geometryType="mesh",!r.assetMaps)return s;const i=O(o,r.assetMaps),a=t.sourceSpatialReference??S.WGS84,u=r.globalIdFieldName,{outFields:n}=t,f=n!=null&&n.length>0?w(n.includes("*")?null:new Set(n)):()=>({});for(const p of e){const m=L(p,u,a,o,i);s.features.push(new g({geometry:m,attributes:f(p)}))}return s}function w(t){return({attributes:o})=>{if(!o)return{};if(!t)return o;for(const r in o)t.has(r)||delete o[r];return o}}function L(t,o,r,e,s){const i=t.attributes[o],a=s.get(i);if(a==null||!t.geometry)return null;const u=I(t.attributes,r,e.transformFieldRoles),n=d.fromJSON(t.geometry);n.spatialReference=r;const f=T(t.attributes,e.transformFieldRoles),p=r.isGeographic?"local":"georeferenced",m=$(a);return m?E.createWithExternalSource(u,m,{extent:n,transform:f,vertexSpace:p,unitConversionDisabled:!0}):E.createIncomplete(u,{extent:n,transform:f,vertexSpace:p})}var c;function O(t,o){const r=new Map;for(const e of o){const s=e.parentGlobalId;if(s==null)continue;const i=e.assetName,a=e.assetType,u=e.assetHash,n=e.assetURL,f=e.conversionStatus,p=e.seqNo,m=M(a,t.supportedFormats);if(!m){b().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${a}, but it does not list it as a supported type`);continue}const y=l(r,s,()=>({files:new Map}));l(y.files,i,()=>({name:i,type:a,mimeType:m,status:P(f),parts:[]})).parts[p]={hash:u,url:n}}return r}function $(t){const o=Array.from(t.files.values()),r=new Array;for(const e of o){if(e.status!==c.COMPLETED)return null;const s=new Array;for(const i of e.parts){if(!i)return null;s.push(new N(i.url,i.hash))}r.push(new D(e.name,e.mimeType,s))}return{type:"service",assets:r}}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,Dt as meshFeatureSetFromJSON};
