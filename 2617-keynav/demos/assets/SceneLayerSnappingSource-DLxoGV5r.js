import{Y as w,f3 as C,v as o,x as s,J as y,a5 as f,ab as L,l as H,fW as E,dG as _,gR as x,U as $,bR as I}from"./main-CUH7s9Sn.js";import{h as O}from"./UpdatingHandles-CqLMgYyG.js";import{h as k}from"./WorkerHandle-rp51C0lm.js";import{t as u}from"./workerHelper-BMHrNoo-.js";import{f as R}from"./edgeProcessing-BH-NzfRw.js";import{V}from"./sphere-CV755Y1n.js";import{e as v,h as A,F as D}from"./SketchViewModel-DPtjtVDr.js";import{r as P}from"./VertexSnappingCandidate-kc1yMff-.js";import"./preload-helper-ExcqyqRp.js";import"./workers-D4gilSoQ.js";import"./Queue-BuGVr5Nt.js";import"./intl-BafM9D6A.js";import"./InterleavedLayout-0xJ3Q8Ft.js";import"./BufferView-BFPhvIx3.js";import"./vec2-maR1OrZI.js";import"./common-DQOJ18NT.js";import"./vec32-BVxZ7_pm.js";import"./vec42-CKs01hkn.js";import"./vec2f64-DohEyf3f.js";import"./vec4f64-o2zAXfmz.js";import"./deduplicate-C7w5nBRD.js";import"./Indices-CqjhJ98S.js";import"./VertexAttribute-Cq4MnHjR.js";import"./glUtil-BuljoYCz.js";import"./enums-Dk3osxpS.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./Normals-MiO2OqJT.js";import"./mat4-BmSopjy-.js";import"./mat3-CruJiiUv.js";import"./mat3f64-q3fE-ZOt.js";import"./plane-OXqzdzET.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./projection-voo92M7M.js";import"./GraphicsLayer-Bs0S4UZs.js";import"./GraphicsCollection-CDsskFzg.js";import"./Layer-oZ-UmqoM.js";import"./TimeExtent-CZezol20.js";import"./ScaleRangeLayer-CaP4p1TE.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-CRfo8o0j.js";import"./parser-CrueJdws.js";import"./mat4f32-DcsiF_Rp.js";import"./ElevationInfo-B8M7_-mq.js";import"./lengthUtils-DDjk7E_n.js";import"./globalCss-DTmqpTm-.js";import"./signal-B2XRx4s5.js";import"./Version-CiZFdl7o.js";import"./quantityUtils-C4IVg9iY.js";import"./projectVectorToVector-Bmp-i5iR.js";import"./projectPointToVector-Dn5ZfUsS.js";import"./geodesicUtils-CQp4_qye.js";import"./Query-DDITEKyw.js";import"./Field-BhhcsUqE.js";import"./fieldType-6X7O7o6f.js";import"./PointSnappingHint-uTEGgJ1t.js";class W extends k{constructor(t){super("EdgeProcessingWorker","extract",{extract:r=>[r.dataBuffer],extractComponentsEdgeLocations:r=>[r.dataBuffer],extractEdgeLocations:r=>[r.dataBuffer]},t)}async process(t,r,i){return i?R(t):j(await this.invoke(new m(t),r))}async extractEdgeLocations(t,r){const i=await this.invokeMethod("extractEdgeLocations",new m(t),r);return u(i)}async extractComponentsEdgeLocations(t,r){const i=await this.invokeMethod("extractComponentsEdgeLocations",new m(t),r);return u(i)}}function j(e){return{regular:{instancesData:u(e.regular.instancesData),lodInfo:{lengths:new Float32Array(e.regular.lodInfo.lengths)}},silhouette:{instancesData:u(e.silhouette.instancesData),lodInfo:{lengths:new Float32Array(e.silhouette.lodInfo.lengths)}},averageEdgeLength:e.averageEdgeLength}}class m{constructor(t){this.dataBuffer=t.data.buffer,this.writerSettings=t.writerSettings,this.skipDeduplicate=t.skipDeduplicate,this.indices=w(t.indices)?t.indices.buffer:t.indices,this.indicesType=w(t.indices)?C(t.indices)?"Uint32Array":"Uint16Array":"Array",this.indicesLength=t.indicesLength}}let d=class extends f{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new B(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:i}=e,n=M;this.renderCoordsHelper.toRenderCoords(i,r.spatialReference,n);const l=e.distance,c=typeof l=="number"?l:l.distance,h=await this._workerHandle.invoke({bounds:V(n[0],n[1],n[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return h.candidates.sort((g,b)=>g.distance-b.distance),h.candidates.map(g=>this._convertCandidate(r,g))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new A({objectId:t.objectId,targetPoint:v(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new P({objectId:t.objectId,targetPoint:v(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=L();return this.renderCoordsHelper.fromRenderCoords(t,r,e),D(r)}async _fetchAllEdgeLocations(e,t){const r=[],i=[];for(const{id:n,uid:l}of e.components)this._ids.has(n)&&r.push((async()=>{const c=await this.fetchEdgeLocations(n,t.signal),h=c.locations.buffer;return i.push(h),{id:n,uid:l,objectIds:c.objectIds,locations:h,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter(({id:n})=>this._ids.has(n))},transferList:i}}};o([s({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),o([s({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),o([s({constructOnly:!0})],d.prototype,"schedule",void 0),o([s({readOnly:!0})],d.prototype,"availability",void 0),d=o([y("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let B=class extends k{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const M=L();let a=class extends f{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new O,this._abortController=new AbortController}destroy(){this._tracker=H(this._tracker),this._abortController=E(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new W(S(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:S(t),fetchEdgeLocations:async(r,i)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,i)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([_(this._workerHandle),_(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const e=this._abortController?.signal,t=await this.getLayerView();t==null||x(e)||(this._tracker=t.trackSnappingSources({add:(r,i)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:r,bounds:i},e))},remove:r=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:r},e))}}))}};function S(e){return t=>e.immediate.schedule(t)}o([s({constructOnly:!0})],a.prototype,"getLayerView",void 0),o([s({constructOnly:!0})],a.prototype,"view",void 0),o([s({readOnly:!0})],a.prototype,"updating",null),o([s({readOnly:!0})],a.prototype,"availability",void 0),a=o([y("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],a);let p=class extends f{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(i=>i.fetchCandidates(e,t)));return $(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new a({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter(I)}_getSceneLayerI3SSource(e,t){return new a({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};o([s({constructOnly:!0})],p.prototype,"layerSource",void 0),o([s({constructOnly:!0})],p.prototype,"view",void 0),o([s({readOnly:!0})],p.prototype,"updating",null),o([s({readOnly:!0})],p.prototype,"availability",void 0),p=o([y("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],p);export{p as SceneLayerSnappingSource};
