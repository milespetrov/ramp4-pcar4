{"version":3,"file":"index-Ce3IOHMF.js","sources":["../../src/fixtures/keyboardnav/lang/lang.csv?raw","../../src/fixtures/keyboardnav/store/keyboardnav-store.ts","../../src/fixtures/keyboardnav/keyboardnav.vue","../../src/fixtures/keyboardnav/api/keyboardnav.ts","../../src/fixtures/keyboardnav/index.ts"],"sourcesContent":["export default \"key,enValue,enValid,frValue,frValid\\nkeyboardnav.activeNamespace,Namespace Active: {name},1,Espace de noms actif : {name},0\\nkeyboardnav.helpTitle,Keyboard Shortcuts,1,Raccourcis clavier,0\\nkeyboardnav.keysTitle,Keys for {name},1,Raccourcis pour {name},0\\nkeyboardnav.helpDescription,\\\"To use keyboard shortcuts refer to the global list below or start by activating a feature group using the combo <span class='key indigo'>SHIFT + [letter]</span>. Once a group is active, its specific shortcuts will appear beneath it. Use <span class='key zinc'>[key]</span> to trigger individual actions within that group.\\\",1,\\\"Pour utiliser les raccourcis clavier, consultez la liste globale ci-dessous ou commencez par activer un groupe de fonctionnalités avec la combinaison <span class='key indigo'>SHIFT + [lettre]</span>. Une fois le groupe actif, ses raccourcis spécifiques apparaîtront en dessous. Utilisez <span class='key zinc'>[touche]</span> pour déclencher les actions individuelles de ce groupe.\\\",0\\nkeyboardnav.noShortcuts,No shortcuts available.,1,Aucun raccourci disponible.,0\\nkeyboardnav.mainShortcuts.title,Global controls,1,Contrôles globaux,0\\nkeyboardnav.mainShortcuts.numbers,Focus on an open panel (1 being leftmost),1,Concentrer sur un panneau ouvert (1 étant le plus à gauche),0\\nkeyboardnav.mainShortcuts.escape,Close a focused panel,1,Fermer un panneau en focus,0\"","import { defineStore } from 'pinia';\nimport { ref } from 'vue';\nimport type { Ref } from 'vue';\n\nexport interface KeyItem {\n    key: string;\n    description: Record<string, string>;\n    handler?: (e: KeyboardEvent) => void;\n}\n\nexport interface NamespaceRegistration {\n    name: Record<string, string>;\n    keys: KeyItem[];\n    handler?: (key: string, e: KeyboardEvent) => void;\n    activeHandler?: (e: KeyboardEvent) => void;\n    deactiveHandler?: (e: KeyboardEvent) => void;\n}\n\nexport interface KeyboardnavStore {\n    activeNamespace: Ref<string | null>;\n    namespaces: Ref<Record<string, NamespaceRegistration>>;\n    helpVisible: Ref<boolean>;\n    register: (namespace: string, options: NamespaceRegistration) => string;\n    unregister: (namespace: string) => void;\n    activate: (namespace: string, e: KeyboardEvent) => void;\n    deactivate: (e?: KeyboardEvent) => void;\n    trigger: (key: string, e: KeyboardEvent) => void;\n    setHelpVisible: (val: boolean) => void;\n}\n\nexport const useKeyboardnavStore = defineStore('keyboardnav', () => {\n    const activeNamespace = ref<string | null>(null);\n    const namespaces = ref<Record<string, NamespaceRegistration>>({});\n    const helpVisible = ref<boolean>(false);\n\n    const RESERVED = ['H', '?'];\n\n    function findFreeLetter(): string | null {\n        const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        for (const ch of alphabet) {\n            if (!namespaces.value[ch] && !RESERVED.includes(ch)) return ch;\n        }\n        return null;\n    }\n\n    function register(namespace: string, options: NamespaceRegistration): string {\n        let ns = namespace.toUpperCase();\n        if (RESERVED.includes(ns) || namespaces.value[ns]) {\n            const free = findFreeLetter();\n            if (free) {\n                ns = free;\n            } else {\n                console.error('No available keyboard namespace letters');\n            }\n        }\n\n        if (!options.handler) {\n            for (const k of options.keys) {\n                if (!k.handler) {\n                    console.error(\n                        `Keyboardnav registration for ${ns} requires handlers for all keys or a parent handler`\n                    );\n                }\n            }\n        }\n\n        namespaces.value[ns] = options;\n        return ns;\n    }\n\n    function setHelpVisible(val: boolean): void {\n        if (helpVisible.value === val) return;\n        helpVisible.value = val;\n    }\n\n    function unregister(namespace: string): void {\n        if (activeNamespace.value === namespace) {\n            activeNamespace.value = null;\n        }\n        delete namespaces.value[namespace];\n    }\n\n    function activate(namespace: string, e: KeyboardEvent): void {\n        activeNamespace.value = namespace;\n        namespaces.value[namespace]?.activeHandler?.(e);\n    }\n\n    function deactivate(e?: KeyboardEvent): void {\n        if (activeNamespace.value) {\n            namespaces.value[activeNamespace.value]?.deactiveHandler?.(e!);\n        }\n        activeNamespace.value = null;\n    }\n\n    function trigger(key: string, e: KeyboardEvent): void {\n        const ns = activeNamespace.value;\n        if (!ns) return;\n        const options = namespaces.value[ns];\n        if (!options) return;\n        if (options.handler) {\n            options.handler(key, e);\n        } else {\n            const item = options.keys.find(k => k.key === key);\n            item?.handler?.(e);\n        }\n    }\n\n    return {\n        activeNamespace,\n        namespaces,\n        helpVisible,\n        register,\n        unregister,\n        activate,\n        deactivate,\n        trigger,\n        setHelpVisible\n    } as KeyboardnavStore;\n});\n","<template>\n    <div>\n        <div\n            v-if=\"helpVisible\"\n            ref=\"overlayRef\"\n            @click.self=\"closeHelp\"\n            class=\"absolute inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 transition-opacity\"\n            tabindex=\"-1\"\n        >\n            <div\n                class=\"relative w-[640px] max-h-[80vh] overflow-y-auto rounded-xl bg-white py-8 px-10 shadow-xl\"\n                role=\"dialog\"\n                aria-modal=\"true\"\n                aria-live=\"polite\"\n            >\n                <button\n                    class=\"absolute right-8 top-8 rounded px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\n                    @click=\"closeHelp\"\n                >\n                    {{ t('panels.controls.close') }}\n                </button>\n                <div class=\"border-b border-gray-200 bg-white px-4 py-20 sm:px-24\">\n                    <h3 class=\"text-base font-semibold text-gray-900\">{{ t('keyboardnav.helpTitle') }}</h3>\n                    <div v-html=\"t('keyboardnav.helpDescription')\" class=\"mt-6 text-sm text-gray-500\"></div>\n                </div>\n                <ul\n                    role=\"list\"\n                    class=\"m-0 max-w-[calc(var(--container-lg)-(--spacing(8)))] list-none divide-y divide-zinc-900/5 p-0 dark:divide-white/5\"\n                >\n                    <li class=\"pl-24 mb-8 py-16\">\n                        <div class=\"flex items-center gap-x-12\">\n                            <span class=\"font-mono text-md text-zinc-600\">\n                                {{ t('keyboardnav.mainShortcuts.title') }}\n                            </span>\n                        </div>\n\n                        <div class=\"space-y-4 p-16 pl-24\">\n                            <div class=\"flex items-center gap-x-12\">\n                                <span\n                                    class=\"font-mono px-6 text-[0.825rem]/6 font-semibold rounded-lg px-1.5 ring-1 ring-inset ring-zinc-300 bg-zinc-400/10 text-zinc-500 dark:ring-zinc-400/30 dark:bg-zinc-400/10 dark:text-zinc-400\"\n                                >\n                                    1-5\n                                </span>\n                                <span class=\"h-2 w-2 rounded-full bg-zinc-300 dark:bg-zinc-600\"></span>\n                                <span class=\"font-mono text-md text-zinc-600\">\n                                    {{ t('keyboardnav.mainShortcuts.numbers') }}\n                                </span>\n                            </div>\n                            <div class=\"flex items-center gap-x-12\">\n                                <span\n                                    class=\"font-mono px-6 text-[0.825rem]/6 font-semibold rounded-lg px-1.5 ring-1 ring-inset ring-zinc-300 bg-zinc-400/10 text-zinc-500 dark:ring-zinc-400/30 dark:bg-zinc-400/10 dark:text-zinc-400\"\n                                >\n                                    ESC\n                                </span>\n                                <span class=\"h-2 w-2 rounded-full bg-zinc-300 dark:bg-zinc-600\"></span>\n                                <span class=\"font-mono text-md text-zinc-600\">\n                                    {{ t('keyboardnav.mainShortcuts.escape') }}\n                                </span>\n                            </div>\n                        </div>\n                    </li>\n                    <li v-if=\"namespaceList.length === 0\" class=\"pl-24 mb-8 py-16 border-b\">\n                        <p class=\"font-mono text-md text-zinc-600\">\n                            {{ t('keyboardnav.noShortcuts') }}\n                        </p>\n                    </li>\n                    <li v-for=\"ns in namespaceList\" :key=\"ns\" class=\"pl-24 mb-8 py-16 border-b\">\n                        <div class=\"flex items-center gap-x-12\">\n                            <span\n                                class=\"font-mono px-6 text-[0.825rem]/6 font-semibold rounded-lg px-1.5 ring-1 ring-inset ring-indigo-300 bg-indigo-400/10 text-indigo-500 dark:ring-indigo-400/30 dark:bg-indigo-400/10 dark:text-indigo-400\"\n                            >\n                                SHIFT + {{ ns }}\n                            </span>\n                            <span class=\"h-2 w-2 rounded-full bg-zinc-300 dark:bg-zinc-600\"></span>\n                            <span class=\"font-mono text-md text-zinc-600\">\n                                {{ t(`keyboardnav.ns.${ns}`) }}\n                            </span>\n                        </div>\n\n                        <div v-if=\"activeNamespace === ns\" class=\"space-y-4 p-16 pl-24\">\n                            <div v-for=\"item in activeKeys\" :key=\"item.key\" class=\"flex items-center gap-x-12\">\n                                <span\n                                    class=\"font-mono px-6 text-[0.825rem]/6 font-semibold rounded-lg px-1.5 ring-1 ring-inset ring-zinc-300 bg-zinc-400/10 text-zinc-500 dark:ring-zinc-400/30 dark:bg-zinc-400/10 dark:text-zinc-400\"\n                                >\n                                    {{ item.key }}\n                                </span>\n                                <span class=\"h-2 w-2 rounded-full bg-zinc-300 dark:bg-zinc-600\"></span>\n                                <span class=\"font-mono text-md text-zinc-600\">\n                                    {{ t(`keyboardnav.key.${ns}.${item.key}`) }}\n                                </span>\n                            </div>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</template>\n<script setup lang=\"ts\">\nimport { storeToRefs } from 'pinia';\nimport { useKeyboardnavStore } from './store/keyboardnav-store';\nimport { computed, useTemplateRef, watch, onBeforeUnmount } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nconst store = useKeyboardnavStore();\nconst { activeNamespace, namespaces, helpVisible } = storeToRefs(store);\nconst { t } = useI18n();\n\nconst namespaceList = computed(() => Object.keys(namespaces.value));\nconst activeKeys = computed(() => {\n    const ns = activeNamespace.value;\n    if (!ns) return [];\n    return namespaces.value[ns]?.keys || [];\n});\n\nconst overlayRef = useTemplateRef('overlayRef');\nfunction closeHelp() {\n    store.setHelpVisible(false);\n}\n\nfunction handleFocusIn(e: FocusEvent) {\n    const target = e.target as Node | null;\n    if (overlayRef.value && target && !overlayRef.value.contains(target)) {\n        closeHelp();\n    }\n}\n\nwatch(helpVisible, val => {\n    if (val) {\n        document.addEventListener('focusin', handleFocusIn);\n    } else {\n        document.removeEventListener('focusin', handleFocusIn);\n    }\n});\n\nonBeforeUnmount(() => {\n    document.removeEventListener('focusin', handleFocusIn);\n});\n</script>\n\n<style lang=\"scss\">\n.key {\n    @apply contents font-mono px-6 text-[0.825rem]/6 font-semibold rounded-lg ring-1 ring-inset;\n\n    &.indigo {\n        @apply ring-indigo-300 bg-indigo-400/10 text-indigo-500 dark:ring-indigo-400/30 dark:bg-indigo-400/10 dark:text-indigo-400;\n    }\n\n    &.zinc {\n        @apply ring-zinc-300 bg-zinc-400/10 text-zinc-500 dark:ring-zinc-400/30 dark:bg-zinc-400/10 dark:text-zinc-400;\n    }\n}\n</style>\n","import { FixtureInstance } from '@/api';\nimport { useKeyboardnavStore } from '../store/keyboardnav-store';\nimport type { NamespaceRegistration } from '../store/keyboardnav-store';\n\n/**\n * @internal\n */\nexport class KeyboardnavAPI extends FixtureInstance {\n    private keyboardnavStore = useKeyboardnavStore(this.$vApp.$pinia);\n    private _isInput(target: EventTarget | null): boolean {\n        if (!target || !(target instanceof HTMLElement)) return false;\n        return !!target.closest('input, textarea, [contenteditable=\"true\"]');\n    }\n\n    /**\n     * Register a namespace letter and its keyboard options.\n     *\n     * @param namespace requested namespace letter.\n     * @param options registration object describing keys and handlers.\n     * @returns final namespace letter used for registration.\n     */\n    register(namespace: string, options: NamespaceRegistration): string {\n        const ns = namespace.toUpperCase();\n        const finalNs = this.keyboardnavStore.register(ns, options);\n        const key = `keyboardnav.ns.${finalNs}`;\n        Object.entries(options.name).forEach(([lang, val]) => {\n            (<any>this.$iApi.$i18n).mergeLocaleMessage(lang, { [key]: val });\n        });\n        options.keys.forEach(k => {\n            const kKey = `keyboardnav.key.${finalNs}.${k.key}`;\n            Object.entries(k.description).forEach(([lang, val]) => {\n                (<any>this.$iApi.$i18n).mergeLocaleMessage(lang, { [kKey]: val });\n            });\n        });\n        return finalNs;\n    }\n\n    /** @internal */\n    added(): void {\n        this.$iApi.$rootEl?.addEventListener('keydown', (e: Event) => this._handleKeyDown(e as KeyboardEvent));\n        this.$iApi.$rootEl?.addEventListener('keyup', (e: Event) => this._handleKeyUp(e as KeyboardEvent));\n        this.$iApi.$rootEl?.addEventListener('blur', this._handleBlur);\n    }\n\n    /** @internal */\n    removed(): void {\n        this.$iApi.$rootEl?.removeEventListener('keydown', (e: Event) => this._handleKeyDown(e as KeyboardEvent));\n        this.$iApi.$rootEl?.removeEventListener('keyup', (e: Event) => this._handleKeyUp(e as KeyboardEvent));\n        this.$iApi.$rootEl?.removeEventListener('blur', this._handleBlur);\n    }\n\n    private _handleKeyDown = (e: KeyboardEvent): void => {\n        if (this._isInput(e.target)) return;\n\n        if (!e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey) {\n            if (/^[1-5]$/.test(e.key)) {\n                const idx = parseInt(e.key) - 1;\n                const panel = this.$iApi.panel.visible[idx];\n                if (panel) {\n                    e.preventDefault();\n                    this.$iApi.panel.focus(panel);\n                }\n                return;\n            } else if (e.key === 'Escape') {\n                const target = e.target as HTMLElement;\n                const container = target.closest('[data-cy]') as HTMLElement | null;\n                if (container && this.$iApi.$rootEl?.querySelector('.panel-container')?.contains(container)) {\n                    e.preventDefault();\n                    const id = container.getAttribute('data-cy');\n                    if (id) {\n                        this.$iApi.panel.close(id);\n                    }\n                }\n                return;\n            }\n        }\n\n        const key = e.key.toUpperCase();\n        if (e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey) {\n            if (key in this.keyboardnavStore.namespaces) {\n                e.preventDefault();\n                if (this.keyboardnavStore.activeNamespace === key) {\n                    this.keyboardnavStore.deactivate(e);\n                } else {\n                    this.keyboardnavStore.activate(key, e);\n                }\n            }\n        } else if (!e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey && key.length === 1) {\n            if (this.keyboardnavStore.activeNamespace) {\n                e.preventDefault();\n                this.keyboardnavStore.trigger(key, e);\n            }\n        }\n    };\n\n    private _handleKeyUp = (e: KeyboardEvent): void => {\n        if (this._isInput(e.target)) return;\n        if ((e.key.toUpperCase() === 'H' || e.key === '?') && e.shiftKey && !e.altKey && !e.ctrlKey && !e.metaKey) {\n            e.preventDefault();\n            this.keyboardnavStore.setHelpVisible(!this.keyboardnavStore.helpVisible);\n        }\n    };\n\n    private _handleBlur = (e?: Event): void => {\n        this.keyboardnavStore.deactivate(e as KeyboardEvent);\n        this.keyboardnavStore.setHelpVisible(false);\n    };\n}\n","import messages from './lang/lang.csv?raw';\nimport KeyboardnavV from './keyboardnav.vue';\nimport { KeyboardnavAPI } from './api/keyboardnav';\nimport { useKeyboardnavStore } from './store/keyboardnav-store';\n\n/**\n * Keyboard Navigation Fixture\n *\n * Enables registration of namespace shortcuts (ALT+SHIFT+[Letter]) and\n * subsequent SHIFT+[Letter] shortcuts within the active namespace.\n */\nclass KeyboardnavFixture extends KeyboardnavAPI {\n  added(): void {\n    // merge translations\n    Object.entries(messages).forEach(value =>\n      (<any>this.$iApi.$i18n).mergeLocaleMessage(...value)\n    );\n\n    const { destroy, el } = this.mount(KeyboardnavV, {\n      app: this.$element\n    });\n    const innerShell = this.$vApp.$el.getElementsByClassName('inner-shell')[0];\n    innerShell.appendChild(el.childNodes[0]);\n\n    super.added();\n\n    this.removed = () => {\n      super.removed();\n      destroy();\n      useKeyboardnavStore(this.$vApp.$pinia).$reset();\n    };\n  }\n}\n\nexport default KeyboardnavFixture;"],"names":["messages","useKeyboardnavStore","defineStore","activeNamespace","ref","namespaces","helpVisible","RESERVED","findFreeLetter","alphabet","ch","register","namespace","options","ns","free","k","setHelpVisible","val","unregister","activate","e","deactivate","trigger","key","store","storeToRefs","t","useI18n","namespaceList","computed","activeKeys","overlayRef","useTemplateRef","closeHelp","handleFocusIn","target","watch","onBeforeUnmount","KeyboardnavAPI","FixtureInstance","finalNs","lang","kKey","idx","panel","container","id","KeyboardnavFixture","value","destroy","el","KeyboardnavV"],"mappings":"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"}