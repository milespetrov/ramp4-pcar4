import{be as S,c8 as f,c9 as d,ca as I,b9 as g,ar as w,s as b,bc as $,v as o,x as a,B as O,z as T,J as P,bA as E}from"./main-ChBpeLuI.js";import{t as L}from"./loadAll-B5aiTbEA.js";import{b as F,j as M,S as R,y as J}from"./PortalLayer-C6AN_uzH.js";import{i as _}from"./scaleUtils-C6Um9dil.js";import{f as j}from"./Layer-C8qdLGqe.js";import{i as N}from"./FeatureType-B42Onokr.js";import{m as q,f as U,s as A}from"./SublayersOwner-BwQimw8q.js";import{l as V}from"./ArcGISService-BuICq1kt.js";import{p as k,t as z}from"./ScaleRangeLayer-W55xjl_Q.js";import{e as B}from"./popupUtils-1sWrPBtu.js";import{f as Z}from"./RefreshableLayer-B0tJvKr0.js";import{l as C}from"./TemporalLayer-D6Wx_XBu.js";import{y as D}from"./ExportImageParameters-EOTquy7Q.js";import{t as G}from"./imageBitmapUtils-CQrs-10r.js";import{e as v}from"./sublayerUtils-CmucgVbI.js";import{t as H}from"./versionUtils-BsU56ZZi.js";import{p as K}from"./TimeExtent-CzdjVl1J.js";import{a as x}from"./timeZoneUtils-Dc-NFr4G.js";import"./preload-helper-ExcqyqRp.js";import"./layerContainerType-C5CzMsLd.js";import"./ElevationInfo-tE5xFfGc.js";import"./lengthUtils-DW5UWe69.js";import"./PortalItem-D8TtwmaX.js";import"./portalItemUtils-CghTT8lQ.js";import"./projection-DuKQIxKG.js";import"./labelingInfo-P2aoxd3z.js";import"./uuid-Cl5lrJ4c.js";import"./Field-iUJYm4Zt.js";import"./fieldType-UsSWCOAx.js";import"./Query-BFb0X7DR.js";import"./SimpleRenderer-BS7fXNWY.js";import"./commonProperties-B-h3mQxD.js";import"./colorRamps-B5EevMIR.js";import"./ColorStop-C_irrj4h.js";import"./visualVariableUtils-B8rbDePz.js";import"./UniqueValueRenderer-CqVCq9Ag.js";import"./diffUtils-Beb8vktw.js";import"./RendererLegendOptions-DCnTfFns.js";import"./styleUtils-DFiu-v5E.js";import"./RelationshipQuery-B7qjJ3nK.js";import"./NormalizationBinParametersMixin-DXnhCs2i.js";import"./labelUtils-CSYj9Rmb.js";import"./Version-CzOZXtHC.js";import"./CollectionFlattener-8Hbjw-u9.js";import"./QueryTask-BE6KZxkE.js";import"./utils-C2bo4yMr.js";import"./executeForIds-BsGOOpCV.js";import"./query-CReotHaQ.js";import"./normalizeUtils-ZGviY68h.js";import"./utils-1EvT4Pql.js";import"./pbfQueryUtils-jr_boBfH.js";import"./pbf-BTYhbICA.js";import"./memoryEstimations-M5QpWVOF.js";import"./OptimizedGeometry-DQetIo3B.js";import"./OptimizedFeatureSet-D1dTxeI4.js";import"./queryZScale-BBytr-Yt.js";import"./executeQueryPBF-DxIqNZmT.js";import"./featureConversionUtils-Daes2vu4.js";import"./FeatureSet-Dj5rmIYQ.js";import"./executeQueryJSON-BGh-rlhs.js";import"./FieldsIndex-BVH5igVS.js";import"./typeUtils-8JTk1n_y.js";import"./ClassBreaksRenderer-CiSR3CdZ.js";import"./LRUCache-Cb7mMEsd.js";import"./MemCache-D_6confb.js";import"./utils-BRg6PM3S.js";import"./defaultCIMValues-DII_GG3u.js";import"./enums-BJSSbDkD.js";import"./heatmapUtils-DqhH5K3c.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./jsonUtils-CQWhtqWC.js";import"./parser-C-ANuOvn.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-BF7auK35.js";import"./floorFilterUtils-DKzVzLpH.js";let t=class extends k(C(z(q(U(V(F(M(R(Z(N(B(j)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new D({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(S).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const n=r.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,n,s){if(!this.loaded||!e)return;const m=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const l=f(s.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===d.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=v(m,i,d.SERVICE)}else if(l>d.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=v(m,i.sublayers,f(i.origin))}}const h=[],u={writeSublayerStructure:p,...s};let y=p||this.hasVisibleLayersForOrigin(l);m.forEach(i=>{const c=i.write({},u);h.push(c),y=y||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(r.layers=h),y&&(r.visibleLayers=m.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,r,n,s){const m=s?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=_({extent:e,width:r})*m;const p=this._exportImageParameters.toJSON(),l=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=e?.spatialReference,u=I(h);p.dpi*=m;const y={};if(s?.timeExtent){const{start:i,end:c}=s.timeExtent.toJSON();y.time=i&&c&&i===c?""+i:`${i??"null"},${c??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:u,imageSR:u,size:r+","+n,...p,...l,...y}}async fetchImage(e,r,n,s){const{data:m}=await this._fetchImage("image",e,r,n,s);return m}async fetchImageBitmap(e,r,n,s){const{data:m,url:p}=await this._fetchImage("blob",e,r,n,s);return G(m,p,s?.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,r),{extent:s,fullExtent:m,timeExtent:p}=n,l=s||m;return{fullExtent:l&&w.fromJSON(l),timeExtent:p&&K.fromJSON({start:p[0],end:p[1]})}}loadAll(){return L(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return H(this,e)}async _fetchImage(e,r,n,s,m){const p={responseType:e,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,n,s,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await g(l,p);return{data:h,url:l}}catch(h){throw $(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};o([a(x("dateFieldsTimeReference"))],t.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],t.prototype,"datesInUnknownTimezone",void 0),o([a()],t.prototype,"dpi",void 0),o([a()],t.prototype,"gdbVersion",void 0),o([a()],t.prototype,"imageFormat",void 0),o([O("imageFormat",["supportedImageFormatTypes"])],t.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],t.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],t.prototype,"imageMaxWidth",void 0),o([a()],t.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],t.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],t.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],t.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],t.prototype,"popupEnabled",void 0),o([a(x("preferredTimeReference"))],t.prototype,"preferredTimeZone",void 0),o([a()],t.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],t.prototype,"sublayers",void 0),o([T("sublayers",{layers:{type:[A]},visibleLayers:{type:[E]}})],t.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],t.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],t.prototype,"type",void 0),o([a(J)],t.prototype,"url",void 0),t=o([P("esri.layers.MapImageLayer")],t);const vt=t;export{vt as default};
