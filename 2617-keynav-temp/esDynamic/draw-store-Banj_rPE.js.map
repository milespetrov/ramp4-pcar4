{"version":3,"file":"draw-store-Banj_rPE.js","sources":["../../src/fixtures/draw/store/draw-store.ts"],"sourcesContent":["import { defineStore } from 'pinia';\nimport type { DrawTypeConfig } from '../api/drawApi';\nimport { reactive, ref } from 'vue';\n\n// DrawTypeConfig is a type that defines the configuration for each draw type\n\nexport type ActiveToolList = 'circle' | 'point' | 'polygon' | 'polyline' | 'rectangle' | 'edit' | '' | null;\n\nexport const useDrawStore = defineStore('draw', () => {\n    const supportedTypes = ref<DrawTypeConfig[]>([]);\n    const activeTool = ref<ActiveToolList>(null);\n    const graphics = reactive<any[]>([]);\n    const selectedGraphicId = ref<string | null>(null);\n    const mapNavEl = ref<unknown | null>(null);\n\n    function setSupportedTypes(types: DrawTypeConfig[]) {\n        supportedTypes.value.splice(0, supportedTypes.value.length, ...types);\n    }\n\n    function setActiveTool(tool: ActiveToolList) {\n        activeTool.value = tool;\n    }\n\n    function addGraphic(graphic: any) {\n        const id = `graphic-${Date.now()}`;\n        graphics.push({\n            id,\n            ...graphic\n        });\n        return id;\n    }\n\n    function removeGraphic(id: string) {\n        const index = graphics.findIndex(g => g.id === id);\n        if (index !== -1) {\n            graphics.splice(index, 1);\n\n            // Clear selection if the removed graphic was selected\n            if (selectedGraphicId.value === id) {\n                selectedGraphicId.value = null;\n            }\n        }\n    }\n\n    function selectGraphic(id: string) {\n        selectedGraphicId.value = id;\n    }\n\n    function clearSelection() {\n        selectedGraphicId.value = null;\n    }\n\n    function getSelectedGraphic() {\n        if (!selectedGraphicId.value) return null;\n        return graphics.find(g => g.id === selectedGraphicId.value);\n    }\n\n    function updateGraphicGeometry(id: string, geometry: any) {\n        const graphic = graphics.find(g => g.id === id);\n        if (graphic) {\n            graphic.geometry = geometry;\n        }\n    }\n\n    return {\n        supportedTypes,\n        activeTool,\n        graphics,\n        selectedGraphicId,\n        setSupportedTypes,\n        setActiveTool,\n        addGraphic,\n        removeGraphic,\n        selectGraphic,\n        clearSelection,\n        getSelectedGraphic,\n        updateGraphicGeometry,\n        mapNavEl\n    };\n});\n"],"names":["useDrawStore","defineStore","supportedTypes","ref","activeTool","graphics","reactive","selectedGraphicId","mapNavEl","setSupportedTypes","types","setActiveTool","tool","addGraphic","graphic","id","removeGraphic","index","g","selectGraphic","clearSelection","getSelectedGraphic","updateGraphicGeometry","geometry"],"mappings":";AAQa,MAAAA,IAAeC,EAAY,QAAQ,MAAM;AAC5C,QAAAC,IAAiBC,EAAsB,EAAE,GACzCC,IAAaD,EAAoB,IAAI,GACrCE,IAAWC,EAAgB,EAAE,GAC7BC,IAAoBJ,EAAmB,IAAI,GAC3CK,IAAWL,EAAoB,IAAI;AAEzC,WAASM,EAAkBC,GAAyB;AAChD,IAAAR,EAAe,MAAM,OAAO,GAAGA,EAAe,MAAM,QAAQ,GAAGQ,CAAK;AAAA,EAAA;AAGxE,WAASC,EAAcC,GAAsB;AACzC,IAAAR,EAAW,QAAQQ;AAAA,EAAA;AAGvB,WAASC,EAAWC,GAAc;AAC9B,UAAMC,IAAK,WAAW,KAAK,IAAK,CAAA;AAChC,WAAAV,EAAS,KAAK;AAAA,MACV,IAAAU;AAAA,MACA,GAAGD;AAAA,IAAA,CACN,GACMC;AAAA,EAAA;AAGX,WAASC,EAAcD,GAAY;AAC/B,UAAME,IAAQZ,EAAS,UAAU,CAAKa,MAAAA,EAAE,OAAOH,CAAE;AACjD,IAAIE,MAAU,OACDZ,EAAA,OAAOY,GAAO,CAAC,GAGpBV,EAAkB,UAAUQ,MAC5BR,EAAkB,QAAQ;AAAA,EAElC;AAGJ,WAASY,EAAcJ,GAAY;AAC/B,IAAAR,EAAkB,QAAQQ;AAAA,EAAA;AAG9B,WAASK,IAAiB;AACtB,IAAAb,EAAkB,QAAQ;AAAA,EAAA;AAG9B,WAASc,IAAqB;AACtB,WAACd,EAAkB,QAChBF,EAAS,KAAK,CAAAa,MAAKA,EAAE,OAAOX,EAAkB,KAAK,IADrB;AAAA,EACqB;AAGrD,WAAAe,EAAsBP,GAAYQ,GAAe;AACtD,UAAMT,IAAUT,EAAS,KAAK,CAAK,MAAA,EAAE,OAAOU,CAAE;AAC9C,IAAID,MACAA,EAAQ,WAAWS;AAAA,EACvB;AAGG,SAAA;AAAA,IACH,gBAAArB;AAAA,IACA,YAAAE;AAAA,IACA,UAAAC;AAAA,IACA,mBAAAE;AAAA,IACA,mBAAAE;AAAA,IACA,eAAAE;AAAA,IACA,YAAAE;AAAA,IACA,eAAAG;AAAA,IACA,eAAAG;AAAA,IACA,gBAAAC;AAAA,IACA,oBAAAC;AAAA,IACA,uBAAAC;AAAA,IACA,UAAAd;AAAA,EACJ;AACJ,CAAC;"}