import{f as m}from"./utils-BUkKDGVD.js";import{$ as f,c0 as y}from"./main-COVUzkxo.js";import{t as j}from"./query-CK4agHgv.js";import{g as R}from"./FeatureSet-CKvngaIf.js";import{c as p}from"./RelationshipQuery-BdGHVreS.js";import"./preload-helper-B76NpbEU.js";import"./normalizeUtils-CJRNJaz1.js";import"./normalizeUtilsCommon-Dv7p-tKp.js";import"./utils-gdzLJiHe.js";import"./pbfQueryUtils-C55LT0W0.js";import"./pbf-CLIrhJlL.js";import"./memoryEstimations-Dxeeh0Gy.js";import"./OptimizedGeometry-CPzkz2C_.js";import"./OptimizedFeature-BiCUfxo4.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-F2-IK9R_.js";import"./projectionUtils-CqZcA6zL.js";import"./Field-CjNcNBtj.js";import"./fieldType-Gbto0FJI.js";import"./Query-BGoAbEhV.js";import"./TimeExtent-68vx0vtV.js";function h(r,e){const t=r.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!e?.returnCountOnly?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(r,e,t){const n=await l(r,e,t),o=n.data,a=o.geometryType,s=o.spatialReference,i={};for(const c of o.relatedRecordGroups){const u={fields:void 0,geometryType:a,spatialReference:s,hasZ:!!o.hasZ,hasM:!!o.hasM,features:c.relatedRecords};if(c.objectId!=null)i[c.objectId]=u;else for(const d of Object.keys(c))d!=="relatedRecords"&&(i[c[d]]=u)}return{...n,data:i}}async function b(r,e,t){const n=await l(r,e,t,{returnCountOnly:!0}),o=n.data,a={};for(const s of o.relatedRecordGroups)s.objectId!=null&&(a[s.objectId]=s.count);return{...n,data:a}}async function l(r,e,t={},n){const o=j({...r.query,f:"json",...n,...h(e,n)});return f(r.path+"/queryRelatedRecords",{...t,query:{...t.query,...o}})}async function H(r,e,t){e=p.from(e);const n=m(r);return F(n,e,t).then(o=>{const a=o.data,s={};return Object.keys(a).forEach(i=>s[i]=R.fromJSON(a[i])),s})}async function z(r,e,t){e=p.from(e);const n=m(r);return b(n,e,{...t}).then(o=>o.data)}export{H as executeRelationshipQuery,z as executeRelationshipQueryForCount};
