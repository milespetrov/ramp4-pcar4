import{N as m,s,f as p}from"./main-sd5p277L.js";import{p as n}from"./MeshVertexAttributes-BBaIARyy.js";import{B as a}from"./vertexSpaceConversion-CypQwsOk.js";import"./preload-helper-DMGCcr4D.js";import"./meshProperties-B4vupnXI.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-B5o_lm6j.js";import"./mat4-BTCsfde8.js";import"./mat4f64-q_b6UJoq.js";import"./vec32-DxNAT_pG.js";import"./spatialReferenceEllipsoidUtils-Bl695g1G.js";import"./computeTranslationToOriginAndRotation-vZpqHnxR.js";import"./projectionUtils-YoY2-uBy.js";import"./projectPointToVector-CZpchDdp.js";import"./meshVertexSpaceUtils-C14X8ObL.js";import"./MeshLocalVertexSpace-Ct4psych.js";import"./vec3-bwcgn38_.js";import"./BufferView-DWrm9lhf.js";import"./vec2-ChnYg_BJ.js";import"./vec42-CKs01hkn.js";import"./vec2f64-Cgb6qxNH.js";import"./vec4f64-DPb6J-GU.js";import"./vec4-B9ADy0zK.js";async function k(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{k as convertMeshVertexSpace};
