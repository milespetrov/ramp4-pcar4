import{j as _,ca as v,N as d,e4 as h,ad as S,af as w,ez as k,E as b,ao as E,dk as C,q as a,v as l,x as A}from"./main-sd5p277L.js";import{d as F}from"./asyncUtils-DfrFNCJz.js";import{t as P}from"./memoize-DmxaQ-k8.js";import{h as G}from"./UpdatingHandles-DReeApNg.js";import{Q as $,L as I,O}from"./projectionUtils-YoY2-uBy.js";import{a as H}from"./normalizeUtilsSync-DQikDKu-.js";import{u as R}from"./featureConversionUtils-BqVdinU0.js";import{s as Z}from"./OptimizedFeature-Bxfhjbxm.js";import{u as x}from"./executeQueryForSnapping-CIBv3Hde.js";import{f as z}from"./FeatureStore-CCi9Yliw.js";import{L}from"./QueryEngine-D-IdJC9T.js";import{Z as M}from"./FieldsIndex-DHFmwGkQ.js";import{y as N}from"./elevationInfoUtils-6xH-Nls2.js";import{A as u}from"./utils-D8d3MseD.js";import{E as W,y as q}from"./SketchViewModel-CRDbnpDO.js";import{o as j,i as T}from"./queryEngineUtils-CgrqnPy1.js";import{i as y,r as J,n as g}from"./symbologySnappingCandidates-DhIP8Oir.js";import{g as B}from"./Scheduler-Dn7agyhf.js";import"./preload-helper-DMGCcr4D.js";import"./normalizeUtilsCommon-CvkpMcSC.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./OptimizedGeometry-Djtue-Ke.js";import"./memoryEstimations-DmReb2bu.js";import"./normalizeUtils-B38FnQ21.js";import"./utils-DFkyrlhn.js";import"./utils-rq89WWSI.js";import"./queryUtils-BqbWdEVa.js";import"./json-Wa8cmqdu.js";import"./timeSupport-CwnveL8O.js";import"./BoundsStore-NtW4LJtq.js";import"./PooledRBush-B94lMZdx.js";import"./quickselect-QQC62dOK.js";import"./optimizedFeatureQueryEngineAdapter-D_hb6L5m.js";import"./WhereClauseCache-BQ32I7MX.js";import"./LRUCache-BB1cebTv.js";import"./MemCache-BSBM3Sy1.js";import"./WhereClause-B3UR1-hq.js";import"./TimeOnly-CgT5LJlS.js";import"./enum-C7MnKeCi.js";import"./UnknownTimeZone-BUb_poPp.js";import"./fieldType-B-RCmTdE.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-CcIBpHZa.js";import"./utils-D9zQUVpX.js";import"./TimeExtent-DnrKMh6k.js";import"./heatmapUtils-D5ZAQtLT.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-DPb6J-GU.js";import"./utils-C7MA1gFT.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-BTCsfde8.js";import"./intl-BjGjKuB_.js";import"./timeZoneUtils-QGFBMkxv.js";import"./utils-C2RJFS9Y.js";import"./ClassBreaksDefinition-DkYFk70Z.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-DOMF2FS4.js";import"./NormalizationBinParametersMixin-Hc044ol-.js";import"./ElevationInfo-CPMvfv93.js";import"./lengthUtils-gPRYSSfA.js";import"./jsonUtils-BqIUBcC0.js";import"./parser-RcR_0rjG.js";import"./cimSymbolUtils-Dr9obWQv.js";import"./utils-jjGHTGcN.js";import"./defaultCIMValues-CQAn2izL.js";import"./enums-_AFKM9Yk.js";import"./GraphicsLayer-B6rIUzyo.js";import"./GraphicsCollection-DuumvAjd.js";import"./Layer-CNbJOlji.js";import"./BlendLayer-CEfHtZ7g.js";import"./layerContainerType-C5CzMsLd.js";import"./ScaleRangeLayer-C_ht83ld.js";import"./editableLayers-bCLQRlZp.js";import"./utils-BjPZ0-bZ.js";import"./Queue-CIPCogvL.js";import"./Version-CKvycuzA.js";import"./Cyclical-MFMI_u-6.js";import"./quantityUtils-artchwUY.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./vec32-DxNAT_pG.js";import"./projectVectorToVector-Cj-oIJwt.js";import"./projectPointToVector-CZpchDdp.js";import"./geodesicUtils-CzM8qGuD.js";import"./Query-bESIdr_1.js";import"./Field-CaaanqEX.js";import"./plane-DVLpSLvt.js";import"./vectorStacks-DYtdB71k.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-DBe5Qlj4.js";import"./mat3-CruJiiUv.js";import"./geodeticLengthOperator-DziG3lZ9.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-PFN11NzL.js";import"./lineSegment-prHO48Qd.js";import"./spatialReferenceEllipsoidUtils-Bl695g1G.js";import"./VertexSnappingCandidate-DM1ZeoNf.js";import"./PointSnappingHint-yccwCGOk.js";import"./debugFlags-BojgM9TH.js";const f="graphics-collections";let n=class extends _{get updating(){return this._updatingHandles.updating}get _hasZ(){const t=this.view;return t!=null&&t.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:t}=this,{layer:e}=this.layerSource,i=t!=null&&t.type==="3d";if(!i||e.type==="map-notes")return y();const o=async(r,s)=>(await v(t.whenLayerView(e),s)).elevationAlignPointsInFeatures(r,s);return y(i,{elevationInfo:e.elevationInfo,alignPointsInFeatures:o})}get _snappingElevationFilter(){const{view:t}=this,e=t!=null&&t.type==="3d"&&this.layerSource.layer.type!=="map-notes";return J(e)}get _symbologySnappingFetcher(){const{view:t}=this,{layer:e}=this.layerSource,i=t!=null&&t.type==="3d",o=this._extrudedPolygonSymbolsCount>0;return i&&e.type!=="map-notes"&&o?g(o,async(r,s)=>{const p=await t.whenLayerView(e);return d(s),p.queryForSymbologySnapping({candidates:r,spatialReference:t.spatialReference},s)}):g()}constructor(t){super(t),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0,this._updatingHandles=new G,this._memoizedMakeGetGroundElevation=P(T)}destroy(){for(const t of this._pendingAdds)t.task.abort();this._pendingAdds.length=0,this._mapSources(t=>this._destroySource(t)),this._updatingHandles.destroy()}initialize(){this._updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this._updatingHandles.removeHandles(f);for(const o of i)this._addMany(o.graphics.toArray()),this.addHandles([o.on("graphic-update",r=>this._onGraphicUpdate(r)),this._updatingHandles.addOnCollectionChange(()=>o.graphics,r=>this._onGraphicsChanged(r))],f)},h);const{view:t}=this,{layer:e}=this.layerSource;t!=null&&t.type==="3d"&&e.type!=="map-notes"&&t.elevationProvider&&this.addHandles([t.elevationProvider.on("elevation-change",({context:i})=>{N(i,e.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),S(()=>e.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),h),w(()=>e,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(t,e){const{point:i,coordinateHelper:{spatialReference:o}}=t,r=await k(this._mapSources(m=>this._fetchCandidatesForSource(m,t,e)));d(e);const s=this._memoizedMakeGetGroundElevation(this.view,o),p=r.flat().map(m=>j(m,s));return W(i,p),p}async _fetchCandidatesForSource(t,e,i){const o=q({parameters:e,mode:this.view?.type??"2d"}),r=await x(t.queryEngine,o,i);d(i);const s=await this._snappingElevationAligner.alignCandidates(r.candidates,e.coordinateHelper.spatialReference,i);d(i);const p=await this._symbologySnappingFetcher.fetch(s,i);d(i);const m=p.length===0?s:[...s,...p];return this._snappingElevationFilter.filter(o,m)}refresh(){}_onGraphicUpdate(t){if(this.getGraphicsLayers().some(e=>e.graphics.includes(t.graphic)))switch(t.property){case"geometry":case"visible":this._remove(t.graphic),this._addMany([t.graphic])}}_onGraphicsChanged(t){for(const e of t.removed)this._remove(e);this._addMany(t.added)}_addMany(t){const e=[],i=new Map;for(const o of t)o.geometry!=null&&(this._needsInitializeProjection(o.geometry.spatialReference)?(e.push(o.geometry.spatialReference),i.set(o.uid,o)):this._add(o));this._createPendingAdd(e,i)}_createPendingAdd(t,e){if(!t.length)return;const i=F(async s=>{await $(t.map(p=>({source:p,dest:this.spatialReference})),{signal:s}),this._markLoadedSpatialReferences(t);for(const p of e.values())this._add(p)});this._updatingHandles.addPromise(i.promise);const o={task:i,graphics:e},r=()=>b(this._pendingAdds,o);i.promise.then(r,r),this._pendingAdds.push(o)}_markLoadedSpatialReferences(t){for(const e of t){e.wkid!=null&&this._loadedWkids.add(e.wkid);const i=e.wkt2||e.wkt;i&&this._loadedWkts.add(i)}}_add(t){if(t.geometry==null||!t.visible)return;let e=t.geometry;if(e.type==="mesh")return;e.type==="extent"&&(e=E.fromExtent(e));const i=this._ensureSource(e.type);if(i==null)return;const o=this._createOptimizedFeature(t.uid,e);o!=null&&(i.featureStore.add(o),u(t.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(t){if(t.wkid!=null&&this._loadedWkids.has(t.wkid))return!1;const e=t.wkt2||t.wkt;return(!e||!this._loadedWkts.has(e))&&!I(t,this.spatialReference)}_createOptimizedFeature(t,e){const i=O(H(e),this.spatialReference);if(!i)return null;const o=this._ensureGeometryHasZ(i),r=R(o,this._hasZ,!1);return new Z(r,{[c]:t},null,t)}_ensureGeometryHasZ(t){if(!this._hasZ)return t;const e=o=>{for(;o.length<3;)o.push(0)},i=t.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(e);break;case"polyline":i.paths.forEach(o=>o.forEach(e));break;case"polygon":i.rings.forEach(o=>o.forEach(e))}return i}_ensureSource(t){const e=this._sources[t];if(e!=null)return e;const i=this._createSource(t);return this._sources[t]=i,i}_createSource(t){const e=C.toJSON(t),i=this._hasZ,o=new z({geometryType:e,hasZ:i,hasM:!1});return{featureStore:o,queryEngine:new L({featureStore:o,fieldsIndex:M.fromLayerJSON({fields:[{name:c,type:"esriFieldTypeOID",alias:c}]}),geometryType:e,hasM:!1,hasZ:i,featureIdInfo:{type:"object-id",fieldName:c},spatialReference:this.spatialReference,priority:B.SNAPPING,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:t}}_remove(t){this._mapSources(e=>this._removeFromSource(e,t));for(const e of this._pendingAdds)e.graphics.delete(t.uid),e.graphics.size===0&&e.task.abort()}_removeFromSource(t,e){const i=e.uid;t.featureStore.has(i)&&(t.featureStore.removeById(e.uid),u(e.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(t){t.queryEngine.destroy(),this._sources[t.type]=null}_mapSources(t){const{point:e,polygon:i,polyline:o,multipoint:r}=this._sources,s=[];return e!=null&&s.push(t(e)),i!=null&&s.push(t(i)),o!=null&&s.push(t(o)),r!=null&&s.push(t(r)),s}};a([l()],n.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],n.prototype,"layerSource",void 0),a([l({constructOnly:!0})],n.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],n.prototype,"view",void 0),a([l({readOnly:!0})],n.prototype,"updating",null),a([l({readOnly:!0})],n.prototype,"availability",void 0),a([l()],n.prototype,"_hasZ",null),a([l()],n.prototype,"_snappingElevationAligner",null),a([l()],n.prototype,"_snappingElevationFilter",null),a([l()],n.prototype,"_symbologySnappingFetcher",null),a([l()],n.prototype,"_extrudedPolygonSymbolsCount",void 0),n=a([A("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],n);const c="OBJECTID";export{n as GraphicsSnappingSource};
