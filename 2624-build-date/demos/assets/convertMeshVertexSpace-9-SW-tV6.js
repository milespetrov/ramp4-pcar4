import{X as m,s,v as p}from"./main-DR_xwlHl.js";import{p as n}from"./MeshVertexAttributes-Ci4vxLzx.js";import{B as c}from"./vertexSpaceConversion-BCQfDuxI.js";import"./preload-helper-ExcqyqRp.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3-CruJiiUv.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-CDE6eeQO.js";import"./mat4f64-Dk4dwAN8.js";import"./vec32-BaKgwqUU.js";import"./spatialReferenceEllipsoidUtils-BDEQD0ZP.js";import"./computeTranslationToOriginAndRotation-DLi7hj3X.js";import"./projectBuffer-DHC_Xvkb.js";import"./projectPointToVector-kvnP2n58.js";import"./projection-r5Syl_wQ.js";import"./meshVertexSpaceUtils-CT4EYVB8.js";import"./MeshLocalVertexSpace-BdmHmw7E.js";import"./vec3-Cj4Nh1rG.js";import"./BufferView-DYyLstr7.js";import"./vec2-maR1OrZI.js";import"./vec42-CKs01hkn.js";import"./vec4-OZW9JiNQ.js";async function g(t,r,o){await Promise.resolve(),m(o);const e=c(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{g as convertMeshVertexSpace};
