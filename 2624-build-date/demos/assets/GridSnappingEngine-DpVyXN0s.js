import{aN as O,d4 as U,n as V,ad as X,B as p,D as m,N as Y}from"./main-DR_xwlHl.js";import{w as E}from"./vec32-BaKgwqUU.js";import{U as F,O as G}from"./projection-r5Syl_wQ.js";import{P as N}from"./normalizeUtils-HsVal6o-.js";import{u as W}from"./scaleUtils-CqYOq9pM.js";import{l as B,u as H,t as I}from"./gridUtils-D3y_2bfk.js";import{f as c,d as T,c as _}from"./hitTestSelectUtils-BmvbwKXv.js";import{r as j,a as k}from"./RouteLayerInteraction-FQVP6rFL.js";import"./preload-helper-ExcqyqRp.js";import"./common-DQOJ18NT.js";import"./projectBuffer-DHC_Xvkb.js";import"./normalizeUtilsCommon-Cwgy1b1I.js";import"./utils-CQXs1fcZ.js";import"./utils-HdXg7529.js";import"./geodesicUtils-DLyRvc-X.js";import"./Cyclical-B_u3_FSl.js";import"./quantityUtils-DuzcQrwg.js";import"./vec2-maR1OrZI.js";import"./vec2f64-DohEyf3f.js";import"./projectVectorToVector-DBmO3V00.js";import"./projectPointToVector-kvnP2n58.js";import"./TimeExtent-Binb6qYY.js";import"./Query-CwLwtfbR.js";import"./Field-DhgSwzL_.js";import"./fieldType-wcv3badA.js";import"./MapView-DebE8KGa.js";import"./CollectionFlattener-CgqLJkhZ.js";import"./workers-Bmo_KZTz.js";import"./Queue-DAlTa1PR.js";import"./intl-Xwi3kkZi.js";import"./TileInfo-D3UwWn26.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-CRjeZL-a.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-D-VmSWKe.js";import"./signal-DpdHNB-N.js";import"./Map-DRC7ZKdr.js";import"./Basemap-DHplCprh.js";import"./loadAll-D7CgJGZT.js";import"./PortalItem-N5xGSJQ8.js";import"./writeUtils-BoN5KkUi.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-CDE6eeQO.js";import"./TablesMixin-v2EDXS2X.js";import"./Layer-Dmbscqbs.js";import"./GraphicsCollection-yn6h-9Kj.js";import"./HeightModelInfo-CX6EC_ZL.js";import"./timeZoneUtils-BuN6Qp8C.js";import"./ReactiveMap-BVH-AOZQ.js";import"./HighlightDefaults-j0GSJ5gH.js";import"./ViewingMode-HRfKv6NR.js";import"./Tile-D6LMvAp1.js";import"./TileKey-c4upOiup.js";import"./quickselect-QQC62dOK.js";import"./mat3-CruJiiUv.js";import"./vec2f32-BbH2jxlN.js";import"./Scheduler-CYjy8Z2N.js";import"./unitBezier-B1N-tmtC.js";import"./definitions-CPtb4TQS.js";import"./enums-Dk3osxpS.js";import"./Texture-DS1w8OP_.js";import"./getDataTypeBytes-DflDeYgv.js";import"./imageUtils-GrpEy0Hn.js";import"./capabilities-Du2wdNlQ.js";import"./Version-Dkw8X6BN.js";import"./ColorBackground-C4Ns_3dU.js";import"./vec42-CKs01hkn.js";import"./vec4f64-o2zAXfmz.js";import"./plane-Dlphdp0O.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-DMHDrBFu.js";import"./elevationInfoUtils-BSbWGznP.js";import"./ElevationInfo-DgKTumVR.js";import"./lengthUtils-DiF_VnKj.js";import"./GraphicsLayer-COBHpkwZ.js";import"./BlendLayer-D5PT9spN.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-Dj_Nb5QI.js";import"./parser-6ZDCoyI9.js";import"./ScaleRangeLayer-rndurihk.js";import"./Stop-D3-DUWAB.js";import"./networkEnums-D2cd4fC2.js";let n=class extends O{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){return this.grid?.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){return U(this.grid?.rotation??0)}get gridCenter(){const{spatialReference:t,grid:i}=this;if(!i||!t||!F(i.center.spatialReference,t))return null;try{const r=G(i.center,t),e=t.isWrappable&&this.view?.center!=null?N(r.x,this.view.center.x,t):r.x;return c(e,r.y,r.z)}catch(r){return V.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",r),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:r,dynamicScaling:e}=i;return r<1?null:B(r,t,e)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?X(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*W(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?H(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,i,r){const{options:e,view:o}=this;if(!e?.effectiveGridEnabled||!o.grid||r.feature?.attributes&&T in r.feature.attributes)return[];const s=r.coordinateHelper.arrayToPoint(t),a=e.distance*(r.pointer==="touch"?e.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(s,a)}fetchCandidatesSync(t,i){const r=[],{grid:e,effectiveViewRotation:o,gridRotation:s,gridCenter:a,viewMetersPerPixel:h,viewMetersPerSRUnit:d,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:$}=this;if(!(e&&h&&d&&a&&g&&S&&C&&$)||!e.dynamicScaling&&$<I||!F(t.spatialReference,g))return r;const y=G(t,g),D=c(y.x,y.y,y.z),l=f(D,-s,a,-o),P=C/d*S,u=q(l,P,a),{shouldSnapX:w,shouldSnapY:v}=A(u,l,i,h,d);if(!w&&!v)return[];const L=c((w?u:l)[0],(v?u:l)[1]),M=f(L,s,a,o),b=f(u,s,a,o);if(v){const R=z(u,l,P,"y"),x=f(R,s,a,o);r.push(new j({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(w){const R=z(u,l,P,"x"),x=f(R,s,a,o);r.push(new j({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return w&&v&&r.push(new k(M,r[0],r[1],!1)),r}};p([m({constructOnly:!0})],n.prototype,"view",void 0),p([m()],n.prototype,"options",void 0),p([m()],n.prototype,"grid",null),p([m()],n.prototype,"effectiveViewRotation",null),p([m()],n.prototype,"gridRotation",null),p([m()],n.prototype,"gridCenter",null),p([m()],n.prototype,"offsetScaleFactor",null),p([m()],n.prototype,"spatialReference",null),p([m()],n.prototype,"gridMetersPerStride",null),p([m()],n.prototype,"viewMetersPerPixel",null),p([m()],n.prototype,"viewMetersPerSRUnit",null),p([m()],n.prototype,"pixelsPerStride",null),p([m()],n.prototype,"updating",null),n=p([Y("esri.views.interactive.snapping.GridSnappingEngine")],n);const f=(t,i,r,e)=>{const o=_(t[0],t[1],t[2]);return E(o,E(o,o,r,i),r,e)},q=(t,i,r)=>{const e=(t[0]-r[0])/i,o=(t[1]-r[1])/i,s=Math.trunc(e),a=Math.trunc(o),h=Math.round(e%1),d=Math.round(o%1),S=r[0]+(s+h)*i,g=r[1]+(a+d)*i;return c(S,g)},A=(t,i,r,e,o)=>{if(e<=0)return{shouldSnapX:!1,shouldSnapY:!1};const s=(t[0]-i[0])/e,a=(t[1]-i[1])/e;return{shouldSnapX:Math.abs(s*o)<r,shouldSnapY:Math.abs(a*o)<r}},z=(t,i,r,e)=>{if(e==="y"){const s=i[0]>t[0]?1:-1;return c(t[0]+r*s,t[1])}const o=i[1]>t[1]?1:-1;return c(t[0],t[1]+r*o)};export{n as GridSnappingEngine};
