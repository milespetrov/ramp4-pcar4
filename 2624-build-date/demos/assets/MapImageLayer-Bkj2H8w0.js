import{Z as S,by as g,bz as c,bA as I,a4 as f,bB as w,s as b,Y as $,B as o,D as a,H as O,G as T,bv as P,N as E}from"./main-DR_xwlHl.js";import{t as L}from"./loadAll-D7CgJGZT.js";import{S as F}from"./MultiOriginJSONSupport-D21fc87f.js";import{i as M}from"./scaleUtils-CqYOq9pM.js";import{f as R}from"./Layer-Dmbscqbs.js";import{i as N}from"./APIKeyMixin-ClDEGPYI.js";import{m as _,f as j,s as J}from"./SublayersOwner-7iuukXJI.js";import{l as q}from"./ArcGISService-DEbcJP7h.js";import{p as U}from"./BlendLayer-D5PT9spN.js";import{e as A}from"./CustomParametersMixin-DTvpsyCM.js";import{b as V}from"./OperationalLayer-hVXzUQBo.js";import{j as k}from"./PortalLayer-ropORnrR.js";import{f as z}from"./RefreshableLayer-C8PdSxm0.js";import{t as B}from"./ScaleRangeLayer-rndurihk.js";import{l as Z}from"./TemporalLayer-BwHnEmTB.js";import{y as D}from"./commonProperties-zw3Mo9uQ.js";import{y as G}from"./ExportImageParameters-DTif2psP.js";import{t as H}from"./imageBitmapUtils-bUK4r8Ta.js";import{e as v}from"./sublayerUtils-DR4MQF1X.js";import{t as C}from"./versionUtils-DPeoiEqU.js";import{p as K}from"./TimeExtent-Binb6qYY.js";import{a as x}from"./timeZoneUtils-BuN6Qp8C.js";import"./preload-helper-ExcqyqRp.js";import"./Version-Dkw8X6BN.js";import"./portalItemUtils-DpJz2Kbi.js";import"./projection-r5Syl_wQ.js";import"./projectBuffer-DHC_Xvkb.js";import"./CollectionFlattener-CgqLJkhZ.js";import"./QueryTask-D_EuIpcz.js";import"./infoFor3D-DhzudQro.js";import"./Query-CwLwtfbR.js";import"./Field-DhgSwzL_.js";import"./fieldType-wcv3badA.js";import"./utils-CQXs1fcZ.js";import"./executeForIds-BWCx6XA8.js";import"./query-AylNLv9P.js";import"./normalizeUtils-HsVal6o-.js";import"./normalizeUtilsCommon-Cwgy1b1I.js";import"./utils-HdXg7529.js";import"./pbfQueryUtils-DHkwQoNB.js";import"./pbf-TuXpcbdw.js";import"./memoryEstimations-CyLIlzmh.js";import"./OptimizedFeature-uzI7c5Ad.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-B0tcd8Ye.js";import"./executeQueryPBF-B0yaw8GB.js";import"./featureConversionUtils-DwrwX_Gd.js";import"./FeatureSet-Dfe2zuGG.js";import"./executeQueryJSON-DNAcw_fK.js";import"./OrderedLayer-C7JwG79U.js";import"./OrderByInfo-D8OOQRsJ.js";import"./labelingInfo-DmnsXKSZ.js";import"./uuid-Cl5lrJ4c.js";import"./SimpleRenderer-CtmUDuGY.js";import"./commonProperties-BKYNV93q.js";import"./colorRamps-DPq8OKeb.js";import"./ColorStop-CqsY8dqo.js";import"./visualVariableUtils-BScBQ5tW.js";import"./lengthUtils-DiF_VnKj.js";import"./UniqueValueRenderer-yNDHjcRp.js";import"./defaultCIMValues-BMJlYWGj.js";import"./enums-CD-fX3vU.js";import"./RendererLegendOptions-DZFDfO_W.js";import"./styleUtils-B4Jm_5aJ.js";import"./RelationshipQuery-D8VektLJ.js";import"./NormalizationBinParametersMixin-BqLnZCUf.js";import"./labelUtils-BehckSwU.js";import"./FeatureType-DBYHiOGN.js";import"./FeatureTemplate-Ba6rDVzH.js";import"./FieldsIndex-hzbjCmqd.js";import"./LayerFloorInfo-7-QHYZaM.js";import"./Relationship-CO7QOJ6v.js";import"./serviceCapabilitiesUtils-DovF0u1p.js";import"./typeUtils-BgNmI9tV.js";import"./ClassBreaksRenderer-C7PDQDSX.js";import"./LRUCache-BDoXR0mO.js";import"./MemCache-BRhZmtF2.js";import"./utils-DDFIxlur.js";import"./heatmapUtils-U44k0jYc.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./popupUtils-DD1J7THZ.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-Dj_Nb5QI.js";import"./parser-6ZDCoyI9.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-CDE6eeQO.js";import"./PortalItem-N5xGSJQ8.js";import"./TimeInfo-Bzb6TGbO.js";import"./ElevationInfo-DgKTumVR.js";import"./floorFilterUtils-DKzVzLpH.js";let r=class extends U(Z(B(_(j(q(V(k(F(z(N(A(R)))))))))))){constructor(...t){super(...t),this._exportImageParameters=new G({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},t).catch(S).then(()=>this._fetchService(e))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(t,e){const n=e.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(t,e,n,s){if(!this.loaded||!t)return;const m=t.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let p=!1;const l=g(s.origin);if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(l===c.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;p=v(m,i,c.SERVICE)}else if(l>c.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");p=v(m,i.sublayers,g(i.origin))}}const h=[],d={writeSublayerStructure:p,...s};let y=p||this.hasVisibleLayersForOrigin(l);m.forEach(i=>{const u=i.write({},d);h.push(u),y=y||i.originOf("visible")==="user"}),h.some(i=>Object.keys(i).length>1)&&(e.layers=h),y&&(e.visibleLayers=m.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(t,e,n,s){const m=s?.pixelRatio||1;t&&this.version>=10&&(t=t.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=M({extent:t,width:e})*m;const p=this._exportImageParameters.toJSON(),l=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=t?.spatialReference,d=I(h);p.dpi*=m;const y={};if(s?.timeExtent){const{start:i,end:u}=s.timeExtent.toJSON();y.time=i&&u&&i===u?""+i:`${i??"null"},${u??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:t?t.xmin+","+t.ymin+","+t.xmax+","+t.ymax:void 0,bboxSR:d,imageSR:d,size:e+","+n,...p,...l,...y}}async fetchImage(t,e,n,s){const{data:m}=await this._fetchImage("image",t,e,n,s);return m}async fetchImageBitmap(t,e,n,s){const{data:m,url:p}=await this._fetchImage("blob",t,e,n,s);return H(m,p,s?.signal)}async fetchRecomputedExtents(t={}){const e={...t,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,e),{extent:s,fullExtent:m,timeExtent:p}=n,l=s||m;return{fullExtent:l&&w.fromJSON(l),timeExtent:p&&K.fromJSON({start:p[0],end:p[1]})}}loadAll(){return L(this,t=>{t(this.allSublayers),t(this.subtables)})}serviceSupportsSpatialReference(t){return C(this,t)}async _fetchImage(t,e,n,s,m){const p={responseType:t,signal:m?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,n,s,m),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(p.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:h}=await f(l,p);return{data:h,url:l}}catch(h){throw $(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:h})}}async _fetchService(t){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:e,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:t});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=e,this.read(e,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(t){return!(t==null||!this.sublayersSourceJSON[t]?.visibleLayers)}};o([a(x("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),o([a()],r.prototype,"dpi",void 0),o([a()],r.prototype,"gdbVersion",void 0),o([a()],r.prototype,"imageFormat",void 0),o([O("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),o([a()],r.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),o([a(x("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),o([a()],r.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),o([T("sublayers",{layers:{type:[J]},visibleLayers:{type:[P]}})],r.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),o([a(D)],r.prototype,"url",void 0),r=o([E("esri.layers.MapImageLayer")],r);const _r=r;export{_r as default};
