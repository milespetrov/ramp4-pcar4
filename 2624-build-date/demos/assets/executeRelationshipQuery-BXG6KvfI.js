import{f as m}from"./utils-CQXs1fcZ.js";import{a4 as f,bA as y}from"./main-DR_xwlHl.js";import{t as j}from"./query-AylNLv9P.js";import{d as R}from"./FeatureSet-Dfe2zuGG.js";import{d as l}from"./RelationshipQuery-D8VektLJ.js";import"./preload-helper-ExcqyqRp.js";import"./normalizeUtils-HsVal6o-.js";import"./normalizeUtilsCommon-Cwgy1b1I.js";import"./utils-HdXg7529.js";import"./pbfQueryUtils-DHkwQoNB.js";import"./pbf-TuXpcbdw.js";import"./memoryEstimations-CyLIlzmh.js";import"./OptimizedFeature-uzI7c5Ad.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-B0tcd8Ye.js";import"./projection-r5Syl_wQ.js";import"./projectBuffer-DHC_Xvkb.js";import"./Field-DhgSwzL_.js";import"./fieldType-wcv3badA.js";import"./Query-CwLwtfbR.js";import"./TimeExtent-Binb6qYY.js";function b(r,e){const t=r.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!e?.returnCountOnly?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(r,e,t){const n=await p(r,e,t),o=n.data,i=o.geometryType,a=o.spatialReference,s={};for(const c of o.relatedRecordGroups){const d={fields:void 0,objectIdFieldName:void 0,geometryType:i,spatialReference:a,hasZ:!!o.hasZ,hasM:!!o.hasM,features:c.relatedRecords};if(c.objectId!=null)s[c.objectId]=d;else for(const u of Object.keys(c))u!=="relatedRecords"&&(s[c[u]]=d)}return{...n,data:s}}async function h(r,e,t){const n=await p(r,e,t,{returnCountOnly:!0}),o=n.data,i={};for(const a of o.relatedRecordGroups)a.objectId!=null&&(i[a.objectId]=a.count);return{...n,data:i}}async function p(r,e,t={},n){const o=j({...r.query,f:"json",...n,...b(e,n)});return f(r.path+"/queryRelatedRecords",{...t,query:{...t.query,...o}})}async function E(r,e,t){e=l.from(e);const n=m(r);return F(n,e,t).then(o=>{const i=o.data,a={};return Object.keys(i).forEach(s=>a[s]=R.fromJSON(i[s])),a})}async function P(r,e,t){e=l.from(e);const n=m(r);return h(n,e,{...t}).then(o=>o.data)}export{E as executeRelationshipQuery,P as executeRelationshipQueryForCount};
