import{f as m}from"./utils-DQDK3TNJ.js";import{$ as f,c0 as y}from"./main-Ca-A5Z1g.js";import{t as j}from"./query-pSfGOE37.js";import{g as R}from"./FeatureSet-Bo1E0ZM_.js";import{c as p}from"./RelationshipQuery-D6Y92Bg3.js";import"./preload-helper-B76NpbEU.js";import"./normalizeUtils-DXSFt8jd.js";import"./normalizeUtilsCommon-CfLxuyaG.js";import"./utils-nWZ25Bb_.js";import"./pbfQueryUtils-BUxhszg-.js";import"./pbf-BMM_E7GA.js";import"./memoryEstimations-D2KGNWAc.js";import"./OptimizedGeometry-B7Yrb6dA.js";import"./OptimizedFeature-D4sQjKnE.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-EAkaVEBe.js";import"./projectionUtils-DtAacSK2.js";import"./Field-DLGOe1__.js";import"./fieldType-C1kCYAVo.js";import"./Query-fq6LNV_8.js";import"./TimeExtent-HFiHTwFl.js";function h(r,e){const t=r.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!e?.returnCountOnly?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function F(r,e,t){const n=await l(r,e,t),o=n.data,a=o.geometryType,s=o.spatialReference,i={};for(const c of o.relatedRecordGroups){const u={fields:void 0,geometryType:a,spatialReference:s,hasZ:!!o.hasZ,hasM:!!o.hasM,features:c.relatedRecords};if(c.objectId!=null)i[c.objectId]=u;else for(const d of Object.keys(c))d!=="relatedRecords"&&(i[c[d]]=u)}return{...n,data:i}}async function b(r,e,t){const n=await l(r,e,t,{returnCountOnly:!0}),o=n.data,a={};for(const s of o.relatedRecordGroups)s.objectId!=null&&(a[s.objectId]=s.count);return{...n,data:a}}async function l(r,e,t={},n){const o=j({...r.query,f:"json",...n,...h(e,n)});return f(r.path+"/queryRelatedRecords",{...t,query:{...t.query,...o}})}async function H(r,e,t){e=p.from(e);const n=m(r);return F(n,e,t).then(o=>{const a=o.data,s={};return Object.keys(a).forEach(i=>s[i]=R.fromJSON(a[i])),s})}async function z(r,e,t){e=p.from(e);const n=m(r);return b(n,e,{...t}).then(o=>o.data)}export{H as executeRelationshipQuery,z as executeRelationshipQueryForCount};
